//Module imports
var getImageLib = require('users/USFS_GTAC/modules:getImagesLib.js');
var cd = require('users/USFS_GTAC/modules:changeDetectionLib.js');
var dLib = cd;

var c = ee.ImageCollection('projects/igde-work/raster-data/composite-collection');
var igdes = ee.FeatureCollection('projects/igde-work/igde-data/iGDE_AnnualDepth_renamed_oct2018_v2');
// var ts = ee.ImageCollection('projects/igde-work/raster-data/DAYMET-Collection').select([0]);
var ts = c.map(getImageLib.simpleAddIndices).select(['NDMI']).map(function(img){return img.clip(igdes)});
// Map.addLayer(ts,{},'ts',false);

var years = ee.List.sequence(1985,2018).getInfo();
var igdesC = years.map(function(yr){
  yr = ee.Number(yr);
  var field = ee.String('Depth').cat(ee.String(yr));
  var img = igdes.reduceToImage([field],ee.Reducer.first());
  img = img.updateMask(img.neq(-999)).rename(['Depth_to_gw']).multiply(-1);
  img = img.set('system:time_start',ee.Date.fromYMD(yr,6,1).millis());
  return img;
});
var ltC =ee.ImageCollection('projects/igde-work/raster-data/LANDTRENDR-collection');
ltC = ltC.map(function(img){return dLib.multBands(img,1,0.001)}).select(['.*NDMI']);

igdesC = ee.ImageCollection.fromImages(igdesC);

var joined2 = getImageLib.joinCollections(ltC,igdesC);
joined2 = joined2.map(function(img){
  var c = ee.Image(1);
  return c.addBands(img).copyProperties(img,['system:time_start']);
});

var fit = joined2.reduce(ee.Reducer.linearRegression(2,1));
var model = fit.select(['coefficients']).arrayProject([0]).arrayFlatten([['intercept','slope']]);
var predicted = joined2.map(function(img){
  var pred = img.select([1]).multiply(model.select(['slope'])).add(model.select(['intercept'])).rename(['Depth_to_gw_pred']);
  return img.addBands(pred).select([1,2,3]);
});

var error = fit.select(['residuals']).arrayFlatten([['error']]);


//Define landtrendr params
var run_params = { 
  maxSegments:            6,
  spikeThreshold:         0.9,
  vertexCountOvershoot:   3,
  preventOneYearRecovery: true,
  recoveryThreshold:      0.25,
  pvalThreshold:          0.05,
  bestModelProportion:    0.75,
  minObservationsNeeded:  6
};

run_params.timeSeries =  ts.map(function(img){return ee.Image(cd.multBands(img,-1,1))});

var lt = ee.Algorithms.TemporalSegmentation.LandTrendr(run_params);
// Map.addLayer(lt,{},'lt',false);

var vertices = lt.arraySlice(0,3,4);

var fittedC = cd.arrayToTimeSeries(lt.select([0]).arraySlice(0,2,3).arrayProject([1]).multiply(-1),lt.select([0]).arraySlice(0,0,1).arrayProject([1]),ee.List.sequence(1985,2018),'NDMI Fitted')
var joined = getImageLib.joinCollections(ts,fittedC);

var ltlt = lt.select('LandTrendr');            // select the LandTrendr band
var rmse = lt.select('rmse');                  // select the rmse band
var vertexMask = ltlt.arraySlice(0, 3, 4);     // slice out the 'Is Vertex' row - yes(1)/no(0)
var vertices = ltlt.arrayMask(vertexMask);     // use the 'Is Vertex' row as a mask for all rows
var leftList = vertices.arraySlice(1, 0, -1);    // slice out the vertices as the start of segments
var rightList = vertices.arraySlice(1, 1, null); // slice out the vertices as the end of segments
var startYear = leftList.arraySlice(0, 0, 1);    // get year dimension of LT data from the segment start vertices
var startVal = leftList.arraySlice(0, 2, 3);     // get spectral index dimension of LT data from the segment start vertices
var endYear = rightList.arraySlice(0, 0, 1);     // get year dimension of LT data from the segment end vertices 
var endVal = rightList.arraySlice(0, 2, 3);      // get spectral index dimension of LT data from the segment end vertices
var dur = endYear.subtract(startYear);       // subtract the segment start year from the segment end year to calculate the duration of segments 
var mag = endVal.subtract(startVal);         // substract the segment start index value from the segment end index value to calculate the delta of segments
var rate = mag.divide(dur);                  // calculate the rate of spectral change    
var dsnr = mag.divide(rmse);              // make mag relative to fit rmse

var all =ee.Image.cat([startYear, endYear, startVal, endVal, mag, dur, rate, dsnr])
                   .unmask(ee.Image(ee.Array([[-9999],[-9999],[-9999],[-9999],[-9999],[-9999],[-9999],[-9999]])))
                   .toArray(0);
var sortByThis = endYear.multiply(-1);

var segInfoSorted =all.arraySort(sortByThis); // sort the array by magnitude
var distFinal = segInfoSorted.arraySlice(1, 0, 1).arrayProject([0]).arrayFlatten([['startYear','endYear','startVal','endVal','mag','dur','rate','dsnr']]); // get the first
  
// Map.addLayer(all) ;
// Map.addLayer(segInfoSorted,{},'segInfoSorted',false);
// Map.addLayer(distArray,{},'distarray')
var plotsPanelLabel = ui.Label('LandTrendr Time Series Plots', {fontWeight: 'bold', stretch: 'horizontal'});
var plotPanel = ui.Panel(null, null, {stretch: 'horizontal'});
var plotPanelParent = ui.Panel([plotsPanelLabel, plotPanel], null, {width: '480px'});

var map = ui.Map();
map.add(ui.Label({
  value: 'Click a point to plot time series',
  style: {position: 'top-center'}
}));

map.onClick(function(coords) {
  plotPanel = plotPanel.clear();
  var x = coords.lon;
  var y = coords.lat;
  var chart1 = ui.Chart.image.series(joined, ee.Geometry.Point([x,y]), ee.Reducer.first(), 30).setOptions({title:'LANDTRENDR Fit',hAxis:{title: 'Year'}});
  c
  var chart2 = ui.Chart.image.series(predicted, ee.Geometry.Point([x,y]), ee.Reducer.first(), 30).setOptions({title:'Depth to GW Relationship to LANDTRENDR Fit',hAxis:{title: 'Year'}});
  // var chart = chartPoint(lt, pixel, name[0], name[1]);
    plotPanel.add(chart2);
    plotPanel.add(chart1);
    
});
map.style().set({cursor:'crosshair'});

// map.addLayer(joined,{},'Time Series',false);
map.addLayer(distFinal,{min:-0.05,max:0.05,palette:'0B0,BBB,B00','bands':'rate'},'Recent Trend',false);
map.addLayer(distFinal,{min:-0.4,max:0.4,palette:'0B0,BBB,B00','bands':'mag'},'Recent Magnitude',true);
map.addLayer(distFinal,{min:-0.1,max:-0.8,palette:'B00,0B0','bands':'endVal'},'End NDMI Value',false);
// map.addLayer(predicted,{},'Fitted Time Series',false);

map.addLayer(error.abs(),{min:0,max:10,'palette':'00F,F00'},'RMSE of linear fit between Depth to GW and NDMI',true);


ui.root.clear();
// ui.root.add(controlPanel);
ui.root.add(map);
map.setCenter(-121.5,38.8,10)
ui.root.add(plotPanelParent);



// var sortedSlope = all.arraySlice(0,3,4)
// Map.addLayer(sortedSlope,{},'sortedSlope')

// var slowchange =  slope.gt(0.005).and(duration.gt(5));
// var fastChange =  mag.gt(0.15).and(duration.lte(5));

// // Map.addLayer(slope,{},'slope',false)
// // Map.addLayer(diff,{},'diff',false);
// // Map.addLayer(change,{},'change',false)

// var slowChangeYears = yearsRight.arrayMask(slowchange).arrayReduce(ee.Reducer.max(), [1]).arrayProject([0]).arrayFlatten([['year']]);
// var fastChangeYears = yearsRight.arrayMask(fastChange).arrayReduce(ee.Reducer.max(), [1]).arrayProject([0]).arrayFlatten([['year']]);

// var slowChangeMag = mag.arrayMask(slowchange).arrayReduce(ee.Reducer.max(), [1]).arrayProject([0]).arrayFlatten([['slowChange']]);
// var fastChangeMag = mag.arrayMask(fastChange).arrayReduce(ee.Reducer.max(), [1]).arrayProject([0]).arrayFlatten([['fastChange']]);

// var vizParamsYears = {min:1985,max:2018,palette:'FF0,F00'};
// var vizParamsMag = {min:0.01,max:0.5,palette:'080,F00'};
// Map.addLayer(slowChangeYears.updateMask(slowChangeYears.neq(0)),vizParamsYears,'slowChangeYears',false)
// Map.addLayer(fastChangeYears.updateMask(fastChangeYears.neq(0)),vizParamsYears,'fastChangeYears',false)

// Map.addLayer(slowChangeMag.updateMask(slowChangeYears.neq(0)),vizParamsMag,'slowChangeMag',false)
// Map.addLayer(fastChangeMag.updateMask(fastChangeYears.neq(0)),vizParamsMag,'fastChangeMag',false)
// Map.addLayer(igdes)