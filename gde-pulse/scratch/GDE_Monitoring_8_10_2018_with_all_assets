/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var sa = /* color: #d63410 */ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Point",
          "coordinates": [
            -121.26708984375,
            38.22229050487363
          ]
        },
        {
          "type": "Point",
          "coordinates": [
            -121.32665634155273,
            38.32388174326888
          ]
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -121.629638671875,
                38.45789034424925
              ],
              [
                -121.5966796875,
                38.28993659801202
              ],
              [
                -121.6021728515625,
                37.99183365313853
              ],
              [
                -121.00002913814882,
                38.0044710702742
              ],
              [
                -120.8880615234375,
                38.052416771864834
              ],
              [
                -120.92050805257486,
                38.60326369339971
              ],
              [
                -121.17919921875,
                38.56964280859044
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -120.58861707334631,
                36.6754433361983
              ],
              [
                -120.56393749235963,
                36.6004498815116
              ],
              [
                -120.38565671718783,
                36.56459546529441
              ],
              [
                -120.10039408893829,
                36.58255218224271
              ],
              [
                -120.05063867231502,
                36.81355027554473
              ],
              [
                -120.20412837047655,
                36.97000278891206
              ],
              [
                -120.30915835576866,
                37.005961136937124
              ],
              [
                -120.430726468594,
                36.971503617123055
              ],
              [
                -120.63998457747454,
                36.84002196348271
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -119.2840576171875,
                34.21634468843463
              ],
              [
                -119.278564453125,
                34.068587174791965
              ],
              [
                -118.9984130859375,
                34.0572105135103
              ],
              [
                -118.46832275390625,
                34.0572105135103
              ],
              [
                -118.4271240234375,
                34.488447837809304
              ],
              [
                -118.5150146484375,
                34.49523909266902
              ],
              [
                -118.76220703125,
                34.490711650881
              ],
              [
                -119.24560546875,
                34.474863669009004
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Point",
          "coordinates": [
            -120.34260749816895,
            36.69457565480935
          ]
        },
        {
          "type": "Point",
          "coordinates": [
            -120.28947830200195,
            36.682462061890156
          ]
        }
      ],
      "coordinates": []
    }),
    USCounties = ee.FeatureCollection("ft:1iaPBa4lFlmhKdwuvq2gwW5huetpPdwRyMPoi23Ea"),
    daymet = ee.ImageCollection("NASA/ORNL/DAYMET_V3"),
    nlcd = ee.ImageCollection("USGS/NLCD"),
    imageVisParam = {"opacity":1,"bands":["scale"],"min":-0.013772818341805323,"max":0.01599860093816268,"gamma":1},
    imageVisParam2 = {"opacity":1,"bands":["NDMI","NDVI","NDWI"],"min":-0.2300981072492498,"max":0.1276169831253862,"gamma":1},
    imageVisParam3 = {"opacity":1,"bands":["scale","offset","offset"],"min":-1,"gamma":1},
    imageVisParam4 = {"opacity":1,"bands":["nir","green","blue"],"min":500,"max":3000,"gamma":1},
    imageVisParam5 = {"opacity":1,"bands":["nir","green","blue"],"min":500,"max":3000,"gamma":1},
    igde = ee.FeatureCollection("users/Shree1175/subset5_3_2018"),
    igde_v1 = ee.FeatureCollection("users/Shree1175/iGDE_5_2018_V1"),
    s1 = /* color: #0b4a8b */ee.Geometry.MultiPolygon(
        [[[[-119.99267578125, 39.01918369029135],
           [-120.16845703125, 38.96795115401593],
           [-120.146484375, 38.72837591823979],
           [-119.99267578125, 38.702659307238015],
           [-119.608154296875, 38.74551518488265],
           [-119.652099609375, 38.93377552819722],
           [-119.849853515625, 38.99357205820946]]],
         [[[-120.5859375, 37.77071473849609],
           [-120.882568359375, 37.84883250647402],
           [-121.04736328125, 37.77071473849609],
           [-121.09130859375, 37.60552821745788],
           [-121.00341796875, 37.55328764595765],
           [-120.9375, 37.71859032558816],
           [-120.728759765625, 37.68382032669382],
           [-120.56396484375, 37.64903402157866]]],
         [[[-121.343994140625, 37.82280243352756],
           [-121.376953125, 37.69251435532741],
           [-121.278076171875, 37.60552821745788],
           [-121.17919921875, 37.67512527892127],
           [-121.146240234375, 37.82280243352756]]],
         [[[-121.66259765625, 37.96152331396613],
           [-121.70654296875, 37.88352498087131],
           [-121.5966796875, 37.76202988573211],
           [-121.46484375, 37.75334401310656],
           [-121.39892578125, 37.85750715625203],
           [-121.409912109375, 37.996162679728116]]],
         [[[-122.51537653878233, 40.39287320673689],
           [-122.33112642578669, 39.77719877213337],
           [-122.354736328125, 39.036252959636606],
           [-122.2998046875, 38.81403111409755],
           [-122.1240234375, 38.57393751557591],
           [-121.92626953125, 38.34165619279595],
           [-121.81640625, 38.20365531807148],
           [-121.5966796875, 38.20365531807148],
           [-121.35498046875, 37.91820111976663],
           [-121.14082715803664, 37.91384293855643],
           [-121.0693359375, 38.06539235133249],
           [-121.025390625, 38.46219172306831],
           [-120.992431640625, 38.762650338334154],
           [-121.201171875, 38.93377552819722],
           [-121.2890625, 39.138581990583525],
           [-122.222900390625, 40.68896903762435]]],
         [[[-123.28857421875, 39.38526381099774],
           [-123.519287109375, 38.89103282648846],
           [-122.947998046875, 38.25543637637944],
           [-122.45361328125, 38.12591462924157],
           [-121.9482421875, 37.93553306183642],
           [-121.761474609375, 38.11727165830543],
           [-122.04594318646122, 38.410496751591566],
           [-122.398681640625, 38.65119833229951],
           [-122.84295596407162, 38.81375526374057],
           [-122.662353515625, 39.18969082109678],
           [-123.06884765625, 39.41922073655955]]]]),
    s2 = /* color: #ffc82d */ee.Geometry.MultiPolygon(
        [[[[-120.926513671875, 36.05798104702502],
           [-120.95947265625, 35.84453450421662],
           [-120.794677734375, 35.88014896488361],
           [-120.78369140625, 36.04021586880111]]],
         [[[-122.200927734375, 37.727280276860036],
           [-122.200927734375, 37.640334898059486],
           [-122.091064453125, 37.59682400108367],
           [-122.069091796875, 37.709899354855125]]],
         [[[-122.618408203125, 37.53586597792038],
           [-122.420654296875, 37.19533058280065],
           [-122.32177734375, 37.21283151445594],
           [-122.266845703125, 37.35269280367273],
           [-122.508544921875, 37.58811876638322]]],
         [[[-122.080078125, 37.23032838760387],
           [-121.739501953125, 37.03763967977139],
           [-121.35498046875, 36.677230602346214],
           [-121.26708984375, 36.57142382346277],
           [-120.91552734375, 36.518465989675875],
           [-120.926513671875, 36.80928470205937],
           [-121.4208984375, 37.25656608611523],
           [-121.9482421875, 37.579412513438385],
           [-122.14599609375, 37.32648861334206]]],
         [[[-119.234619140625, 38.06539235133249],
           [-119.168701171875, 37.94419750075405],
           [-119.036865234375, 38.09998264736481]]],
         [[[-118.916015625, 37.814123701604466],
           [-118.9599609375, 37.60552821745788],
           [-118.817138671875, 37.55328764595765],
           [-118.6962890625, 37.63163475580643],
           [-118.597412109375, 37.779398571318765],
           [-118.817138671875, 37.83148014503288]]],
         [[[-118.685302734375, 37.56199695314352],
           [-118.71826171875, 37.405073750176925],
           [-118.531494140625, 37.483576550427],
           [-118.58642578125, 37.622933594900864]]],
         [[[-118.531494140625, 37.33522435930639],
           [-118.4765625, 37.23032838760387],
           [-118.179931640625, 37.22158045838649],
           [-118.23486328125, 37.58811876638322],
           [-118.421630859375, 37.61423141542417]]],
         [[[-118.388671875, 37.02886944696474],
           [-118.3447265625, 36.85325222344019],
           [-118.01513671875, 36.40359962073253],
           [-117.784423828125, 36.48314061639213],
           [-117.91580604134333, 36.73828014018068],
           [-118.125, 37.06394430056685]]],
         [[[-117.7294921875, 35.915747419499695],
           [-117.828369140625, 35.71975793933433],
           [-117.5537109375, 35.59478566548724],
           [-117.48779296875, 35.79108281624994]]],
         [[[-117.94921875, 35.25459097465022],
           [-117.8173828125, 35.380092992092145],
           [-117.9931640625, 35.41591492345623]]],
         [[[-118.465576171875, 35.6126508187567],
           [-118.23486328125, 35.6126508187567],
           [-118.22916250779423, 35.78661391064123],
           [-118.509521484375, 35.85343961959182]]],
         [[[-119.6630859375, 35.36217605914681],
           [-119.344482421875, 35.380092992092145],
           [-119.1796875, 35.808904044068626],
           [-119.4873046875, 35.88905007936091],
           [-119.86083984375, 35.799993929885275]]],
         [[[-119.476318359375, 35.263561862152095],
           [-119.33349609375, 35.04798673426734],
           [-118.8720703125, 35.092945313732635],
           [-118.465576171875, 35.35321610123824],
           [-118.531494140625, 35.51434313431818],
           [-118.817138671875, 35.43381992014202],
           [-119.146728515625, 35.44277092585766]]],
         [[[-121.11328125, 37.07271048132943],
           [-120.816650390625, 36.88840804313823],
           [-120.640869140625, 36.89719446989036],
           [-120.640869140625, 37.081475648860525],
           [-120.289306640625, 37.18657859524883],
           [-120.201416015625, 37.34395908944491],
           [-120.531005859375, 37.34395908944491],
           [-120.596923828125, 37.54457732085582],
           [-120.992431640625, 37.50972584293751],
           [-121.2451171875, 37.39634613318923]]],
         [[[-120.7177734375, 36.756490329505176],
           [-120.52001953125, 36.659606226479696],
           [-120.289306640625, 36.86204269508728],
           [-120.355224609375, 36.94989178681327],
           [-120.498046875, 37.1252862849668],
           [-120.60791015625, 37.07271048132943]]],
         [[[-120.201416015625, 37.21283151445594],
           [-120.25634765625, 37.081475648860525],
           [-120.069580078125, 37.10776507118514],
           [-120.08056640625, 37.24782120155428]]],
         [[[-119.981689453125, 37.13404537126446],
           [-119.99267578125, 37.002552672159545],
           [-119.8388671875, 37.046408899699564],
           [-119.8828125, 37.16031654673677]]],
         [[[-120.322265625, 36.88840804313823],
           [-120.443115234375, 36.79169061907076],
           [-120.443115234375, 36.6507925250347],
           [-120.41015625, 36.518465989675875],
           [-120.069580078125, 36.74768773190056],
           [-119.739990234375, 36.712467243386264],
           [-119.542236328125, 36.659606226479696],
           [-119.674072265625, 36.53612263184686],
           [-119.849853515625, 36.43896124085945],
           [-119.981689453125, 36.527294814546245],
           [-120.069580078125, 36.474306755095235],
           [-119.893798828125, 36.32397712011264],
           [-119.981689453125, 36.217687122250574],
           [-119.915771484375, 36.11125252076156],
           [-119.761962890625, 36.1822249804225],
           [-119.586181640625, 36.31512514748051],
           [-119.454345703125, 36.43896124085945],
           [-119.278564453125, 36.58024660149866],
           [-119.322509765625, 36.77409249464195],
           [-119.696044921875, 36.94989178681327],
           [-120.1025390625, 36.88840804313823]]],
         [[[-119.5751953125, 36.12900165569653],
           [-119.586181640625, 35.951329861522666],
           [-119.53125, 35.871246850027966],
           [-119.3994140625, 35.92464453144099],
           [-119.300537109375, 36.12012758978146],
           [-119.091796875, 36.24427318493909],
           [-118.992919921875, 36.37706783983682],
           [-118.905029296875, 36.43896124085945],
           [-118.98193359375, 36.54494944148322],
           [-119.146728515625, 36.57142382346277],
           [-119.256591796875, 36.465471886798134],
           [-119.3994140625, 36.39475669987386],
           [-119.542236328125, 36.26199220445664]]],
         [[[-121.519775390625, 36.527294814546245],
           [-121.552734375, 36.43896124085945],
           [-121.431884765625, 36.4477991295848],
           [-121.343994140625, 36.465471886798134],
           [-121.409912109375, 36.54494944148322]]],
         [[[-122.025146484375, 36.465471886798134],
           [-121.904296875, 36.43896124085945],
           [-121.70654296875, 36.421282443649496],
           [-121.651611328125, 36.527294814546245],
           [-121.9921875, 36.615527631349245]]],
         [[[-122.047119140625, 37.09023980307208],
           [-122.080078125, 36.923547681089296],
           [-121.92626953125, 36.932330061503144],
           [-121.805419921875, 36.82687474287728],
           [-121.695556640625, 36.870832155646305],
           [-121.739501953125, 37.002552672159545],
           [-121.893310546875, 37.081475648860525]]]]),
    s3 = /* color: #00ffff */ee.Geometry.MultiPolygon(
        [[[[-116.751708984375, 35.29943548054545],
           [-116.707763671875, 35.16482750605027],
           [-116.488037109375, 35.22767235493586],
           [-116.729736328125, 35.37113502280101]]],
         [[[-116.597900390625, 34.7506398050501],
           [-116.378173828125, 34.8047829195724],
           [-116.466064453125, 35.02099970111467],
           [-116.751708984375, 34.994003757575776]]],
         [[[-116.16943359375, 34.25267611710151],
           [-116.070556640625, 34.05265942137599],
           [-115.99365234375, 34.116352469972746],
           [-115.99365234375, 34.25267611710151]]],
         [[[-116.1474609375, 33.5963189611327],
           [-116.224365234375, 33.44977658311846],
           [-116.114501953125, 33.394759218577995],
           [-115.960693359375, 33.55055114384406]]],
         [[[-117.57568359375, 33.063924198120645],
           [-117.18017578125, 32.97180377635759],
           [-116.839599609375, 32.94414888814148],
           [-116.4990234375, 33.25706340236547],
           [-116.8505859375, 33.44060944370356],
           [-117.2021484375, 33.63291573870479],
           [-117.432861328125, 33.55055114384406],
           [-117.53173828125, 33.27543541298162]]],
         [[[-117.147216796875, 32.491230287947594],
           [-116.993408203125, 32.48196313217176],
           [-116.927490234375, 32.63012300670739],
           [-117.037353515625, 32.694865977875054],
           [-117.169189453125, 32.70411114440741]]],
         [[[-117.257080078125, 34.97600151317588],
           [-117.18017578125, 35.02099970111467],
           [-117.301025390625, 35.083955579276434]]],
         [[[-116.883544921875, 34.83184114982865],
           [-116.905517578125, 34.939985151560435],
           [-117.147216796875, 34.939985151560435],
           [-117.4658203125, 34.768691457552706],
           [-117.454833984375, 34.58799745550482],
           [-117.39990234375, 34.28899186503753],
           [-117.388916015625, 34.16181816123038],
           [-117.279052734375, 34.13454168193737],
           [-117.1142578125, 34.298068350990825],
           [-117.2900390625, 34.66032236481892],
           [-117.18017578125, 34.77771580360469]]],
         [[[-117.081298828125, 34.38877925439021],
           [-116.9384765625, 34.397844946449865],
           [-116.89453125, 34.542762387234845],
           [-117.09228515625, 34.52466147177173]]],
         [[[-116.883544921875, 34.32529192442733],
           [-116.91650390625, 34.261756524459805],
           [-116.7626953125, 34.21634468843463],
           [-116.7626953125, 34.32529192442733]]],
         [[[-116.773681640625, 33.687781758439364],
           [-116.663818359375, 34.03445260967644],
           [-117.191162109375, 34.198173096277266],
           [-117.388916015625, 34.05265942137599],
           [-117.213134765625, 33.897777013859475],
           [-116.87255859375, 33.678639851675555]]],
         [[[-120.684814453125, 34.813803317113155],
           [-120.618896484375, 34.56085936708384],
           [-120.3662109375, 34.56085936708384],
           [-120.34423828125, 34.82282272723702],
           [-120.60791015625, 34.84987503195418]]],
         [[[-120.245361328125, 34.551811369170494],
           [-120.113525390625, 34.50655662164561],
           [-119.8388671875, 34.642247047768535],
           [-119.9267578125, 34.75966612466248],
           [-120.201416015625, 34.8047829195724]]],
         [[[-119.4873046875, 34.642247047768535],
           [-119.24560546875, 34.59704151614417],
           [-119.256591796875, 34.75966612466248],
           [-119.4873046875, 34.8047829195724]]],
         [[[-119.080810546875, 34.876918445772084],
           [-119.168701171875, 34.66935854524542],
           [-118.89404296875, 34.66032236481892],
           [-118.89404296875, 34.876918445772084]]],
         [[[-119.915771484375, 34.361576287484176],
           [-119.476318359375, 34.30714385628804],
           [-119.24560546875, 33.99802726234877],
           [-118.707275390625, 34.13454168193737],
           [-118.564453125, 34.27083595165],
           [-118.7841796875, 34.45221847282654],
           [-119.02587890625, 34.52466147177173],
           [-119.652099609375, 34.59704151614417],
           [-119.9267578125, 34.46127728843705]]],
         [[[-118.663330078125, 34.82282272723702],
           [-118.663330078125, 34.687427949314845],
           [-118.443603515625, 34.723554927042215],
           [-118.509521484375, 34.82282272723702]]],
         [[[-118.048095703125, 34.74161249883173],
           [-117.828369140625, 34.768691457552706],
           [-117.806396484375, 34.858890491257796],
           [-118.01513671875, 34.876918445772084]]],
         [[[-118.729248046875, 34.397844946449865],
           [-118.6083984375, 34.361576287484176],
           [-118.333740234375, 34.379712580462204],
           [-118.32275390625, 34.50655662164561],
           [-118.443603515625, 34.50655662164561],
           [-118.6962890625, 34.53371242139564]]],
         [[[-118.23486328125, 34.50655662164561],
           [-118.289794921875, 34.4069096565206],
           [-118.125, 34.379712580462204],
           [-118.070068359375, 34.50655662164561]]],
         [[[-117.9931640625, 34.542762387234845],
           [-117.8173828125, 34.488447837809304],
           [-117.7734375, 34.642247047768535],
           [-117.960205078125, 34.642247047768535]]],
         [[[-117.718505859375, 33.770015152780125],
           [-117.44384765625, 33.93424531117312],
           [-117.48779296875, 34.03445260967644],
           [-117.850341796875, 33.99802726234877]]],
         [[[-118.157958984375, 34.125447565116126],
           [-118.19091796875, 33.99802726234877],
           [-117.960205078125, 33.99802726234877],
           [-117.83935546875, 34.17090836352573],
           [-118.048095703125, 34.23451236236987],
           [-118.157958984375, 34.189085831172406]]],
         [[[-117.806396484375, 33.486435450999885],
           [-117.630615234375, 33.41310221370827],
           [-117.53173828125, 33.55970664841198],
           [-117.718505859375, 33.5963189611327]]],
         [[[-117.630615234375, 33.72433966174761],
           [-117.39990234375, 33.706062655101206],
           [-117.26806640625, 33.78827853625996],
           [-117.432861328125, 33.87953701355925],
           [-117.59765625, 33.86129311351553]]]]),
    s4 = /* color: #bf04c2 */ee.Geometry.MultiPolygon(
        [[[[-124.266357421875, 41.77950486590359],
           [-124.1015625, 41.69752591075902],
           [-124.090576171875, 41.30257109430558],
           [-124.222412109375, 41.17865397233167],
           [-124.178466796875, 41.07106913080641],
           [-124.156494140625, 40.863679665481676],
           [-123.980712890625, 40.8387491379646],
           [-123.94775390625, 40.93841495689795],
           [-124.068603515625, 41.13729606112276],
           [-123.94775390625, 41.269549502842565],
           [-123.980712890625, 41.50034959128928],
           [-124.002685546875, 41.83682786072715],
           [-124.2333984375, 41.94314874732696]]],
         [[[-123.72802734375, 41.10419094457646],
           [-123.760986328125, 40.96330795307353],
           [-123.5302734375, 40.94671366508002],
           [-123.563232421875, 41.06278606873302]]],
         [[[-122.552490234375, 41.64828831259533],
           [-122.431640625, 41.66470503009207],
           [-122.4755859375, 41.75492216766299],
           [-122.62939453125, 41.74672584176937]]],
         [[[-121.629638671875, 41.86137915587359],
           [-121.44287109375, 41.77950486590359],
           [-121.17919921875, 41.98399427093563],
           [-121.640625, 41.96765920367816]]],
         [[[-120.34423828125, 41.83682786072715],
           [-120.157470703125, 41.795888098191426],
           [-120.003662109375, 41.934976500546604],
           [-120.38818359375, 41.98399427093563]]],
         [[[-120.047607421875, 41.25303244065319],
           [-120.047607421875, 41.39329428878487],
           [-120.047607421875, 41.75492216766299],
           [-120.30029296875, 41.672911819602085],
           [-120.223388671875, 41.50034959128928],
           [-120.223388671875, 41.33557597312392],
           [-120.135498046875, 41.261291493919884]]],
         [[[-120.948486328125, 41.50857729743936],
           [-120.926513671875, 41.40977583200956],
           [-120.706787109375, 41.36031866306709],
           [-120.640869140625, 41.45919537950706],
           [-120.82763671875, 41.541477666790286]]],
         [[[-121.1572265625, 41.27780646738183],
           [-121.22314453125, 41.10419094457646],
           [-121.102294921875, 41.054501963290505],
           [-120.9814453125, 41.244772343082076]]],
         [[[-121.497802734375, 41.09591205639547],
           [-121.46484375, 40.9964840143779],
           [-121.278076171875, 40.979898069620134],
           [-121.322021484375, 41.10419094457646]]],
         [[[-121.322021484375, 40.36328834091583],
           [-121.343994140625, 40.22082997283287],
           [-121.190185546875, 40.22921818870117],
           [-121.11328125, 40.33817045213394],
           [-121.2451171875, 40.40513069752789]]],
         [[[-120.52001953125, 40.22921818870117],
           [-120.3662109375, 40.26276066437183],
           [-120.157470703125, 40.313043208880906],
           [-120.34423828125, 40.39676430557203],
           [-120.5419921875, 40.463666324587685]]],
         [[[-120.465087890625, 40.027614437486655],
           [-120.16845703125, 40.08647729380882],
           [-120.16845703125, 40.2040504251133],
           [-120.4541015625, 40.195659093364654]]],
         [[[-120.091552734375, 40.10328591293439],
           [-120.157470703125, 40.027614437486655],
           [-120.08056640625, 39.8928799002948],
           [-119.981689453125, 39.92658842190944]]],
         [[[-120.706787109375, 39.816975090490004],
           [-120.69580078125, 39.7240885773337],
           [-120.574951171875, 39.69873414348139],
           [-120.5419921875, 39.85915479295669]]],
         [[[-120.2783203125, 39.918162846609455],
           [-120.25634765625, 39.80009595634838],
           [-120.157470703125, 39.80009595634838]]],
         [[[-120.3662109375, 39.774769485295465],
           [-120.399169921875, 39.69873414348139],
           [-120.223388671875, 39.58875727696545],
           [-120.16845703125, 39.69873414348139]]],
         [[[-120.113525390625, 39.63107677008367],
           [-120.0146484375, 39.639537564366684],
           [-119.981689453125, 39.816975090490004],
           [-120.12451171875, 39.8675876245102]]],
         [[[-120.2783203125, 39.257778150283364],
           [-120.12451171875, 39.257778150283364],
           [-120.0146484375, 39.33429742980724],
           [-120.223388671875, 39.36827914916013]]],
         [[[-124.244384765625, 40.697299008636755],
           [-124.0576171875, 40.6723059714534],
           [-123.94775390625, 40.805493843894155],
           [-124.156494140625, 40.8387491379646]]]]),
    ca = /* color: #ffe636 */ee.Geometry.Polygon(
        [[[-124.43115234375, 41.1951898294896],
          [-124.56298828125, 40.26276066437183],
          [-124.013671875, 39.04478604850143],
          [-123.28857421875, 38.376115424036044],
          [-122.76123046875, 37.24782120155428],
          [-122.080078125, 36.54494944148322],
          [-121.1572265625, 34.687427949314845],
          [-120.43212890625, 34.41597338448186],
          [-119.55322265625, 34.07086232376631],
          [-118.740234375, 34.03445260967644],
          [-118.5205078125, 33.72433966174761],
          [-117.92724609375, 33.44977658311846],
          [-117.2021484375, 32.39851580247402],
          [-116.4990234375, 32.52828936482526],
          [-115.5322265625, 33.13755119234614],
          [-115.11474609375, 34.65128519895413],
          [-119.9267578125, 39.02771884021161],
          [-119.99267578125, 42.00032514831621],
          [-124.365234375, 42.049292638686836]]]),
    vis_slope = {"opacity":1,"bands":["NDMI_slope"],"min":-0.02071556955575943,"max":0.009101589620113372,"palette":["ff380b","ff7660","ffb9ae","fff7be","ffdb58","f5ff62","a2ff8b","2eeb4e"]},
    AnnualTS = ee.FeatureCollection("users/Shree1175/iGDE_5_2018_V1_joined_ndvi_annDepth"),
    all_Wells = ee.FeatureCollection("users/Shree1175/GDEpulse6201_point_well_data_20180802"),
    iGDE_landsat_1000m = ee.FeatureCollection("users/Shree1175/iGDEveg053_Landsat_dissolved_8022018_1000m_Depth_gwell_macro_veg_final"),
    iGDE_v053 = ee.FeatureCollection("users/Shree1175/i02_IndicatorsofGDE_Vegetation_v0_5_3_updated_macroclasses"),
    iGDE_v1_aug = ee.FeatureCollection("users/Shree1175/GDEpulse2018_iGDE_V1_20180802_joined_annual_depth_macro_veg"),
    iGDE_landsat1000m_subset = ee.FeatureCollection("projects/igde-work/igde-data/iGDEveg053_Landsat_dissolved_8022018_1000m_Depth_gwell_macro_veg_final_gt5yr_lt30ft"),
    iGDE_all = ee.FeatureCollection("projects/igde-work/igde-data/iGDEveg053_Landsat_dissolved_join_well_8022018_closest_ecoregion_macro_veg_final");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/////////////////////////////////////////////////////////////////////////////////////////
//Script to test if RS indices can be used to monitor change in ground water dependent ecosystems (iGDE)
// using temporal trend of a suite of spectral indices (NDVI, NDMI, NIRv...etc) related to 
// vegetation health and temporal trend of depth to ground water from USGS Well data
// iGDE dataset has already been developed by TNC (KK) using high resolution 
// imagery and ground vegetation
///////////////////////////////////////////////////////////////////////////////////////////////////////
//Script written by 
//Tanushre Biswas,PhD
//Spatial Data Scientist, TNC 
////////////////////////////////////////////////////////////////////////////////////////////


//load all the updated assests Aug 2018
var empty = ee.Image().byte();

//all_Wells : all USGS well data from California n = 42,000
Map.addLayer(all_Wells, {palette: '0000FF'}, "USGS wells CA")
print(all_Wells.limit(10))
// iGDE_v053: original iGDE database polygons with vegetation and macrovegetation class
var outline = empty.paint({featureCollection: iGDE_v053, color: 2, width: 1});
Map.addLayer(outline, {palette: '0bbe00'}, "iGDE_polygons_5_03_2018", false)

//iGDE_landsat_ALL :  (n = 93,000) all iGDE polygons converted to raster to match landsat grid, 
//then converted back to polygons and dissolved by igDE_polygon_ID joined to all closest GWELL Data, 
//updated by macrovegetation groups
var outline = empty.paint({featureCollection: iGDE_all, color: 2, width: 1});
Map.addLayer(outline, {palette: 'd843e2'}, "iGDE_landsat_ALL_nearby_USGS wells CA", false)


//iGDE_landsat_1000m :  (n = 78,000) all iGDE polygons converted to raster to match landsat grid, 
//then converted back to polygons and dissolved by igDE_polygon_ID nearby 1000m from GWell, 
//updated by macrovegetation groups
Map.addLayer(iGDE_landsat_1000m, {}, "iGDE_landsat_within_1000m_USGS wells CA", false)

//above dataset subset to grab only those iGDE with well data that meets the following conditions(n = 15419)
//var outline = empty.paint({featureCollection: iGDE_landsat1000m_subset, color: 2, width: 3});
//
var outline = empty.paint({featureCollection: iGDE_landsat1000m_subset, color: 2, width: 3});
Map.addLayer(outline, {palette: '0F00FF'}, "iGDE within 1000m well, >5 years well data, drop gw <30ft", false)
//iGDE V1 polygon with n = 8800, updated with annual depth to ground water
//updated with macro vegetation and NULL values fixed. 
var outline = empty.paint({featureCollection: iGDE_v1_aug, color: 2, width: 3});
Map.addLayer(outline, {palette: 'FF0000'}, "iGDE_V1_updated timeseries", false)
print(iGDE_v1_aug.limit(20))

//print(all_Wells)
//print(iGDE_v053)
//print(iGDE_v1_aug)



//////////////////////////////////////////////////////////////////////////////////////////////////
//Load landsat collection from the archive
//Define BasePeriond, Analaysis Period
//Calculate Indices
//Plot Indices for entire timeperiod
//Calculate Median for baseperiod
//Calculate Median for each year for the AnalysisPeriod
//Subtract Baseperiod from each year AnalysisPeriod
//Prepare data for timeseries analysis of diff
//Plot the difference and slope
//Summarize diff_eachyear, LRegressoin results for each polygon from vegmask or shapefiles
//////////////////////////////////////////////////////////////////////////////////////////////////////
//Year, Months, Sensors, Indices used for the analysis can be change based on the area of interest
///////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//check the assets loaded;
//Map.addLayer(venturaold,{},'Venturaold',true);// nodata = 65536
//Map.addLayer(maskVentura,{},'Venturanew',true);// nodata = 65535
//Map.addLayer(maskveg3,{},'mask2',true);// nodata = 2147483647
//Map.addLayer(maskveg4,{},'mask4',true);// nodata = 32767
//Map.addLayer(maskSac,{},'Sacramento',true);// nodata = 65535

//Map.setCenter(-119.1282, 34.2746,11);
Map.setCenter(-120.125, 36.654,6);
//-121.2671, 38.2223
////////////////////////////////////////////////////////////////////////////////////
//Define input variables
///////////////////////////////////////////////////////////////////////////////////
var startDate=1985;
var endDate=2017;
var startJulian= 120;//may 1st (190)
var endJulian= 273; //Sept end (260)

var startBaselineYear = 1985;
var endBaselineYear = 2000;
var startAnalysisYear=2001;
var endAnalysisYear=2017;

var analysisIndices = ['NDVI', 'NDMI','NBR', 'EVI', 'Greenness', 'NIRv']; //Select Indices: NDVI, NDMI, NDWI, NBR, EVI, GRV, TCAP**, NIRv*'[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]
var ventura_bounds = USCounties.filter(ee.Filter.eq('County Name','Ventura'));
////////////////////////////////////////////
// set study area  for iGDE temporal analysis
/////////////////////////////////////////////

//var sa = ca
//var sa = igde_v1
//var sa = ee.FeatureCollection(igde_v2)
//var sa = s1
//var sa = s2
//var sa = s3
//var sa = s4

////////////////////////////////////////////////////////////////////////////////////////////////
// Define Landsat Sensors and Bands
/////////////////////////////////////////////
var sensorBandDictLandsatSR =ee.Dictionary({L8 : ee.List([1,2,3,4,5,6,7,10]),
                        L7 : ee.List([0,1,2,3,4,5,6,9]),
                        L5 : ee.List([0,1,2,3,4,5,6,9]),
                        L4 : ee.List([0,1,2,3,4,5,6,9])
  });
var bandNamesLandsatWOTOA = ee.List(['blue','green','red','nir','swir1','swir2','cfmask','pixel_qa']);

///////////////////////////////////////////////////////////////////////
// Define visualization parameters
////////////////////////////////////////////////////////////////////////
var vizParamsLandsat = {'min': 500,'max': [3000,6000,3500],   'bands':'swir1,nir,red'};
var vizParamsIndices = {bands:'NDVI', min: -0.75,  max: 0.75};
var vizParamsL8 = {  bands: ['B7', 'B5', 'B4'],   min: 0,   max: 8000};
var vizParamsL5 = {  bands: ['B6', 'B4', 'B3'],   min: 0,   max: 8000};
var vizParams = {'min': 500,'max': [3000,6000,3500],   'bands':'swir1,nir,red'};

////////////////////////////////////////////////////////////////
//Set up dates
//////////////////////////////////////////////////////////////////
if(startJulian > endJulian){endJulian = endJulian + 365}
var startDate = ee.Date.fromYMD(startBaselineYear,1,1).advance(startJulian,'day');
var endDate = ee.Date.fromYMD(endAnalysisYear,1,1).advance(endJulian,'day');

var baselineStartDate = ee.Date.fromYMD(startBaselineYear,1,1).advance(startJulian,'day');
var baselineEndDate = ee.Date.fromYMD(endBaselineYear,1,1).advance(endJulian,'day');

var analysisStartDate = ee.Date.fromYMD(startAnalysisYear,1,1).advance(startJulian,'day');
var analysisEndDate = ee.Date.fromYMD(endAnalysisYear,1,1).advance(endJulian,'day');

print('Start and end dates for all images:',startDate,endDate);
//print('Start and end baseline dates:',baselineStartDate,baselineEndDate);
//print('Start and end analysis dates:',analysisStartDate,analysisEndDate);

/////////////////////////////////////////////
// Get precipitation Data, TBiswas, TNC
////////////////////////////////////////////

var collections = [
  { 
    name: 'CHIRPS', scale: 5000,
    collection: ee.ImageCollection('UCSB-CHG/CHIRPS/PENTAD')
  },
  { 
    name: 'CFSV2', scale: 30000,
    collection: ee.ImageCollection('NOAA/CFSV2/FOR6H')
      .select('Precipitation_rate_surface_6_Hour_Average')
      .map(function(i) { 
        return i.multiply(60 * 60 * 6) // convert to mm
          .copyProperties(i, ['system:time_start'])
      })
  },
  { 
    name: 'PRISM', scale: 30000,
    collection: ee.ImageCollection('OREGONSTATE/PRISM/AN81m')
      .select('ppt')
      .map(function(i) { 
        return i
      .copyProperties(i, ['system:time_start'])
      })
  }
]
  
function getDates(start, stop, step) {
  return ee.List.sequence(start, stop).map(function(year) {
    return ee.List.sequence(1, 12, step).map(function(month) {
      return ee.Date.fromYMD(year, month, 1)
    })
  }).flatten()
}

function compute(start, stop, step) {
  var dates = getDates(start, stop, step)

  var features = collections.map(function(c) {
    return dates.map(function(d) {
      var p = c.collection
        .filterDate(d, ee.Date(d).advance(step, 'month'))
        .sum()
        .reduceRegion(ee.Reducer.mean(), sa, c.scale).values().get(0)
        
      return ee.Feature(null)
        .set('system:time_start', ee.Date(d).millis())
        .set(c.name, p)        
    })
  })
  
  return ee.FeatureCollection(ee.List(features).flatten())
}



//print(monthly)

// check here 5-19 - 2018
var addYear = function(image) {
  var t = image.get('system:time_start');
  var y = ee.Date(t).get('year');
  var yimg = ee.Image(y).short().rename('year');
  var addyimg = yimg.addBands(image);
  return addyimg;
};

/////////////////////////////////////////////////////////////////////////
//Function for adding common indices
//TBiswas,RSAC
//////////////////////////////////////////////////////////////////////////
function addIndices(in_image){
    in_image = in_image.addBands(in_image.normalizedDifference(['nir', 'red']).select([0],['NDVI']));
    in_image = in_image.addBands(in_image.normalizedDifference(['nir', 'swir2']).select([0],['NBR']));
    in_image = in_image.addBands(in_image.normalizedDifference(['nir', 'swir1']).select([0],['NDMI']));
    in_image = in_image.addBands(in_image.normalizedDifference(['green', 'nir']).select([0],['NDWI']));
    in_image = in_image.addBands(in_image.expression("2.5 * ((b('nir') - b('red')) / (b('nir') + 6 * b('red') - 7.5 * b('blue') + 1))").rename('EVI'));
    in_image = in_image.addBands(in_image.normalizedDifference(['green', 'red']).select([0],['GRV']));
    return in_image;
};

//////////////////////////////////////////////////////////////////////////
//Function for adding common indices
//TBiswas,RSAC
// bandNamesLandsatWOTOA = ['blue','green','red','nir','swir1','swir2','cfmask']
//////////////////////////////////////////////////////////////////////////

//Function for Tasselcap transformation 
var l8_tc_coeffs = [ee.Image([0.3029, 0.2786, 0.4733, 0.5599, 0.508, 0.1872]),
                    ee.Image([-0.2941, -0.243, -0.5424, 0.7276, 0.0713, -0.1608]),
                    ee.Image([ 0.1511, 0.1973, 0.3283, 0.3407, -0.7117, -0.4559])
                    ];
//Crist 1985 coeffs - TOA refl (http://www.gis.usu.edu/~doug/RS5750/assign/OLD/RSE(17)-301.pdf)
var l5_tc_coeffs2 = [ee.Image([0.2043, 0.4158, 0.5524, 0.5741]),
                    ee.Image([-0.1603, -0.2819, -0.4934, 0.7940]),
                    ee.Image([0.0315, 0.2021, 0.3102, 0.1594])
                   ];
//Crist 1985 coeffs - TOA refl (http://www.gis.usu.edu/~doug/RS5750/assign/OLD/RSE(17)-301.pdf)
var l5_tc_coeffs = [ee.Image([0.2043, 0.4158, 0.5524, 0.5741, 0.3124, 0.2303]),
                    ee.Image([-0.1603, -0.2819, -0.4934, 0.7940, -0.0002, -0.1446]),
                    ee.Image([0.0315, 0.2021, 0.3102, 0.1594, -0.6806, -0.6109])
                   ];                   
var tcap_dict = {L5: l5_tc_coeffs};              
var tcap_names = ['Brightness','Greenness', 'Wetness'];

//Function to compute tc transformation 
var tc2 = function(image){
    var multiplyAdd_coff = function(matrix){
    return image.multiply(matrix).reduce(ee.call("Reducer.sum"));
    };
var coeffs = l5_tc_coeffs2;
//print(coeffs);
var tco = ee.Image(coeffs.map(multiplyAdd_coff)).select([0,1,2], tcap_names);
    tco = tco.select([0,1,2],["Brightness","Greenness","Wetness"]).divide(1000);
return tco;
};

// From Hamdi Zurqani changed tcap coff to Crist 1985//
var calculateTasseledCap = function (image){
  var b = image.select([0,1,2,3,4,5]);
  var brightness_= ee.Image([0.2043, 0.4158, 0.5524, 0.5741, 0.3124, 0.2303]);
  var greenness_= ee.Image([-0.1603, -0.2819, -0.4934, 0.7940, -0.0002, -0.1446]);
  var wetness_= ee.Image([ 0.0315, 0.2021, 0.3102, 0.1594, -0.6806, -0.6109]);
  var sum = ee.call("Reducer.sum");
  
  var brightness = b.multiply(brightness_).reduce(sum);
  var greenness = b.multiply(greenness_).reduce(sum);
  var wetness = b.multiply(wetness_).reduce(sum);
  
  var tct = ee.Image(brightness).addBands(greenness).addBands(wetness);
      tct = tct.select([0,1,2],["Brightness","Greenness","Wetness"]).divide(1000);
return image.addBands(tct);    
};

////////////////////////////////////////////////////////////////////////////////
//NIRv: Badgley, G., Field, C. B., & Berry, J. A. (2017). Canopy near-infrared reflectance and terrestrial photosynthesis. Science Advances, 3, e1602244.
// NIRv function: ‘image’ is a 2 band stack of NDVI and NIR
// TBiswas, TNC
//////////////////////////////////////////////////////////////////////////////////////////

var calc_NIRv = function(image){
var stack = image.select('NDVI','nir')
var NIRv =  stack.select(0).subtract(0.08).multiply(stack.select(1).multiply(0.0001)).select([0],['NIRv'])
return image = image.addBands(NIRv);
};

/////////////////////////////////////////////////////////////////////////////////////////
// Function to get year information added as a band to the entire collection.
//TBiswas,RSAC
////////////////////////////////////////////////////////////////////////////////////////

var addYear = function(image) {
  var t = image.get('system:time_start');
  var y = ee.Date(t).get('year');
  var yimg = ee.Image(y).short().rename('year');
  var addyimg = yimg.addBands(image)
  return addyimg ;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////
//Method for applying Fmask cloud and shadow mask- Zhu Woodcock 2012 https://scholar.google.com/citations?view_op=view_citation&hl=en&user=9ODFYW4AAAAJ&citation_for_view=9ODFYW4AAAAJ:eQOLeE2rZwMC
//Ian Housman, RSAC (fmask), added cloud mask (SR Collections - TB)
/////////////////////////////////////////////////////////////////////////////////////////////////////////

function fMask(img){
  var fmsk = img.select('cfmask');
  var cloudAndShadow = fmsk.eq(2).or(fmsk.eq(4)).eq(0);
  return img.updateMask(cloudAndShadow);
}

//function for masking clouds
var cloudmasking=function(img){
  var cloudmask = img.select('cfmask').eq(0)//.not()
  return img.updateMask(cloudmask);
}

//cloud masking on Landsat SR collection
var maskClouds_pixelQA = function(image) {
  var mask = image.select('pixel_qa');
  var maskImage = mask.bitwiseAnd(32).neq(0).or(mask.bitwiseAnd(8).neq(0));
  var maskWater = mask.bitwiseAnd(4).neq(0)
  //var mask2 = image.select('sr_cloud_qa').bitwiseAnd(4).neq(0);
  maskImage = maskImage.eq(0);
  return image.mask(maskImage);
}

//cloud mask using pixel_qa for SR images
var clearMask = function(image) {
  var clear = image.select('pixel_qa').bitwiseAnd(2).neq(0);
  var mask = clear.eq(1);
  image = image.updateMask(mask);
  return image;
};
//////////////////////////////////////////////////////////////////////////////////////////////////

var includeL7 = true;

////////////////////////////////////////////////////////////////////////////////////////////////////////
//FUNCTION to select all landsat image
//RSAC
//////////////////////////////////////////////////////////////////////////////////////////////////////
function getLandsat(startDate,endDate,startJulian,endJulian){
  var ls;
  var l5SRs = ee.ImageCollection('LANDSAT/LT05/C01/T1_SR')
                .filterDate(startDate,endDate)
                .filter(ee.Filter.calendarRange(startJulian,endJulian))
                .filterBounds(sa)
                .select(sensorBandDictLandsatSR.get('L5'),bandNamesLandsatWOTOA);
  
  var l8SRs = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
          .filterDate(startDate,endDate)
          .filter(ee.Filter.calendarRange(startJulian,endJulian))
          .filterBounds(sa)
          .select(sensorBandDictLandsatSR.get('L8'),bandNamesLandsatWOTOA);
  if(includeL7){
    var l7SRs = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR')
            .filterDate(startDate,endDate)
            .filter(ee.Filter.calendarRange(startJulian,endJulian))
            .filterBounds(sa)
            .select(sensorBandDictLandsatSR.get('L7'),bandNamesLandsatWOTOA);
  
  ls = ee.ImageCollection(l5SRs.merge(l7SRs).merge(l8SRs));
  }
  else{
    ls = ee.ImageCollection(l5SRs.merge(l8SRs));
  }
  return ls.map(maskClouds_pixelQA);
}
///////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
//Function to annualize a collection
//Ian Housman, RSAC
//////////////////////////////////////////////////////////////////////////////
function annualizeSeries(series,startYear,endYear,compositingPeriod){
var years = ee.List.sequence(startYear,endYear,compositingPeriod);
var out =years.map(function(yr){
    var startDateT = ee.Date.fromYMD(yr,1,1);
    var endDateT = startDateT.advance(compositingPeriod,'year').advance(-1,'day');
    var seriesT = series.filterDate(startDateT,endDateT);
    seriesT = seriesT.median();
    return seriesT.set('system:time_start',ee.Date.fromYMD(yr,7,1).millis()).clip(sa);
    return seriesT;
  });
return ee.ImageCollection.fromImages(out);

}

////////////////////////////////////////////////////////////////////////////////////////
//Function to add a constant intercept band and year  independent bands for Linear Regression
//TBiswas, TNC
////////////////////////////////////////////////////////////////////////////////////////////
function prepForLinearRegression(img){
  var d = ee.Date(img.get('system:time_start'));
  var y = d.get('year');
  d = y.add(d.getFraction('year'));
  var db = ee.Image.constant(d).select([0],['year']).float();
  return ee.Image(1).addBands(db).addBands(img)
  .copyProperties(img,['system:time_start']);
}
/////////////////////////////////////////////////

/////////////////////////////////////////////////////
//Function to convert collection to a multi-band image
//Assumes a single-band image in the collection
//Derives its own band names
/////////////////////////////////////////////////////////


/////////////////////////////////////////////////////////
//Function to convert collection to a multi-band image
//TBiwas, TNC
////////////////////////////////////////////////////////
function collectionToImage(collection){
  var first = ee.Image(collection.first());
  var theRest = collection.filter(ee.Filter.neq('system:index', first.id()));
  return theRest.iterate(function(image, previous) {
    return ee.Image(previous).addBands(image);
  }, first);
}


//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
// Analysis on landsat collection for monitoring temporal change in different parameters
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// get landsat data from the entire archive
var collection = getLandsat(startDate,endDate,startJulian,endJulian)
print('Entire Landsat collection', collection)

// calculate common indices and add to the collection 
var collection_with_indices = collection.map(addIndices);
print('Update Indices to the collection',collection_with_indices)

// calculate indices and add to the collection 
var collection_with_tcap = collection_with_indices.map(calculateTasseledCap);
print('Update collection with TCAP',collection_with_tcap)

// Create NIRv layer 
var collection_with_NIRv = collection_with_tcap.map(calc_NIRv);
print('Update collection with NIRv',collection_with_NIRv)

//Reduce collection to annual median for each year
var annualMedianTS = annualizeSeries(collection_with_NIRv,startBaselineYear,endAnalysisYear,1)
print ('AnnualMedian of the collection', annualMedianTS);

//Create Base period Timeseries
var BasePeriod_TimeSeries = annualMedianTS.filterDate(baselineStartDate,baselineEndDate);

//Create Analysis Timeseries
var Analysis_TimeSeries = annualMedianTS.filterDate(analysisStartDate,analysisEndDate)

//Add yearBand of data in the time series
var annualMedianTSyear = annualMedianTS.map(addYear);
print('AddyearTimeSeries',annualMedianTSyear)
//Map.addLayer(annualMedianTSyear,{},'AnnualYear',false);

//////////////////////////////////////////////////////////////////////////
//Get the first and last image for visual referene
//////////////////////////////////////////////////////////////////////////
var firstImage = ee.Image(annualMedianTS.first());
var lastImage = ee.Image(annualMedianTS.sort('system:time_start',false).first());

//Map.addLayer(firstImage,vizParamsLandsat,'Composite ' + startBaselineYear.toString(),true);
//Map.addLayer(lastImage,vizParamsLandsat,'Composite ' + endAnalysisYear.toString(),true);
//Map.addLayer(annualMedianTS.select(["Brightness"]),{min:1.0, max: 4.0},"Brightness")
//Map.addLayer(annualMedianTS.select(["Greenness"]),{min:0.25, max: 2.5},"Greeness")
//Map.addLayer(annualMedianTS.select(["Wetness"]),{min:-0.1, max: -3.0},"Wetness")
//Map.addLayer(annualMedianTS.select(["NIRv"]),{min:-0.1, max: -3.0},"NIRv")


/////////////////////////////////////////////////////////////////////////////////////////////
//Add Entire annual time series for graphing
////////////////////////////////////////////////////////////////////////////////////////
Map.addLayer(annualMedianTS.select(analysisIndices),vizParamsIndices,'Full Time Series for Charting',false)
var chartIndices = ui.Chart.image.series(annualMedianTS.select(analysisIndices), sa, ee.Reducer.mean(), 1500)
  .setOptions({title: 'Temporal Trend of Indices'
   //vAxis: {title: 'Indices'},
  // hAxis: {title: 'date', format: 'MM-yy', gridlines: {count: 7}},  
  //legend:{analysisIndices}, 
  });
print(chartIndices)

//////////////////////////////////////////////////////////////////////////////
// Load NAIP or PLANET TIMESERIES to Validate the results of spectral change
//////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////
// Grabbing all NAIP images with NIR bands within the study area
var collection1 = ee.ImageCollection('USDA/NAIP/DOQQ')
  .filter(ee.Filter.listContains('system:band_names', 'N')) 
  .filterBounds(sa);
  collection1 = collection1.map(function(img){
  var bns = img.bandNames();
  var bnsL = bns.length();
  return img.set('bnsL',bnsL)
});


// Sort NAIP Collection within study area by year
var naip_collect = collection1.sort('system:time_start');  
naip_collect = naip_collect.select([0,1,2,3]);

var get_projection = ee.Image(naip_collect.first()).select([0]).projection(); //properties(('date_range',[0])); //select([0]).pr('system:time_start'());

//Get the dates of First and Last images
var start_image = ee.Image(naip_collect.sort('system:time_start',true).first());
var end_image = ee.Image(naip_collect.sort('system:time_start',false).first());
var start_date = ee.Date(start_image.get('system:time_start'));
var end_date = ee.Date(end_image.get('system:time_start'));

//Reduce collection to annual median for each year
var annualNAIP = annualizeSeries(naip_collect,2009,2016,1)

/////////////////////////////////////////////////////////////////////////////////////////


// NAIP Image, bands added create annual mosaics
var naip2009 = ee.Image(naip_collect.filterDate('2009-01-01','2009-12-31').mosaic());
var naip2010 = ee.Image(naip_collect.filterDate('2010-01-01','2010-12-31').mosaic());
var naip2012 = ee.Image(naip_collect.filterDate('2012-01-01','2012-12-31').mosaic());
var naip2014 = ee.Image(naip_collect.filterDate('2014-01-01','2014-12-31').mosaic());
var naip2016 = ee.Image(naip_collect.filterDate('2016-01-01','2016-12-31').mosaic());
var naip2009_2010 = ee.Image(naip_collect.filterDate('2009-01-01','2010-12-31').mosaic());
var naip2014_2016 = ee.Image(naip_collect.filterDate('2014-01-01','2016-12-31').mosaic());

///////////////////////////
//Visualize NAIP Imageries
////////////////////////////

Map.addLayer(naip2009_2010, {bands:["R","G","B"]}, 'NAIP Mosaic (2009_2010)', false);
Map.addLayer(naip2014_2016, {bands:["R","G","B"]}, 'NAIP Mosaic (2014_2016)', false);
Map.addLayer(naip2009, {bands:["R","G","B"]}, 'NAIP (2009)', false);
Map.addLayer(naip2010, {bands:["R","G","B"]}, 'NAIP (2010)', false);
Map.addLayer(naip2012, {bands:["R","G","B"]}, 'NAIP (2012)', false);
Map.addLayer(naip2014, {bands:["R","G","B"]}, 'NAIP (2014)', false);
Map.addLayer(naip2016, {bands:["R","G","B"]}, 'NAIP (2016)', false);

///////////////////////////////////////
////// Load and view the GDE's ////////
///////////////////////////////////////


var all_gde = igde //.merge(geoGDEs_Sac)
//Map.addLayer(all_gde,{'color':'0000FF'},'iGDEs_subset',true);
Map.addLayer(igde_v1,{'color':'0000FF'},'iGDEs_v1',true);
//Map.addLayer(igde_v2,{'color':'0000FF'},'iGDEs_v2',true);

/// Check the properties of iGDE /////////
//print('Check the property of old Sac iGDE', geoGDEs_Sac.limit(10))
print('Check the property of iGDEs within CA',igde_v1.limit(10))
//print('Check the property of iGDEs within CA',igde_v2.limit(10))

/////////////////////////////////////////////////////////////////////
//Find some central stat from the baseline to serve as a normal
/////////////////////////////////////////////////////////////////////
var AnnualMedian = annualMedianTS.median();
print('AnnualMedian',AnnualMedian)
//print('BaselineMedian(1985-2000)', baselineMedian)
//print('AnalysisTimeSeries',Analysis_TimeSeries)
//Map.addLayer(baselineMedian,vizParamsLandsat,'BaselineMedian_Indices',false);

//Extract the Annual TimeSeries of Indices for all iGDE
//Show temporal trend of NDVI

var NDVI_TS = annualMedianTS.select('NDVI')
print('NDVI_Timeseries', NDVI_TS)
var ndvi_palette =
     'FFFFFF, CE7E45, DF923D, F1B555, FCD163, 99B718, 74A901, 66A000, 529400,' +     '3E8601, 207401, 056201, 004C00, 023B01, 012E01, 011D01, 011301';
//Map.addLayer(NDVI_TS, {min: -0.1, max: 1.0, palette: ndvi_palette}, 'ndvi-pl');



//////////////////////////////////////////////////////////////////////////////////////////////////
////////////////// Flatten the collection to arrays for regional summary //////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////
//Create Final Complete TimeSeries with Results for exporting results 
/////////////////////////////////////////////////////////////////////

//var ImageStack_all_Indices = ee.Image(collectionToImage(annualMedianTS.select(analysisIndices)))
var ImageStack_NDVI = ee.Image(collectionToImage(NDVI_TS))

//extract year from : analysisDepartures.select('year')
//print(actualPredicted)
//print(analysisLinearModel)
//print(analysisDepartures)

//combine with actualPredicted stack, analysisLinearModel
//Collection to reduce regions and create tables

//Extract NDVI reulst from the DepartureCollection, convert it to Image, Reduce Region
//var test =  annualMedianTS.select('NDVI');
//print('Dept_NDVIcollection',test)
//var ImageStack_NDVI = ee.Image(collectionToImage(test))

//Convert TimeSeries_AnalysisDeparture to Image, Reduce Region
//var ImageStack_NDMI= ee.Image(collectionToImage(analysisDepartures.select('NDMI')))



//////////////////////////////////////////////////////////////////////////////////////
///////////////////////////// Zonal summary for iGDE polygons ////////////////////////

//iGDE_v1 Summary
var Table_v1 = ImageStack_NDVI.reduceRegions({
  //collection:feature2,
  collection:igde_v1, 
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(), 
    sharedInputs: true}), 
  scale: 30,
});


var Table_v2 = ImageStack_NDVI.reduceRegions({
  //collection:feature2,
  collection:igde_v2, 
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(), 
    sharedInputs: true}), 
  scale: 30,
});

/////////////////////////////////////////////////////////////////////
//Export tables to google drive
////////////////////////////////////////////////////////////////////
Export.table.toDrive(Table_v1, 'TS_NDVI_Indices_v1', "Earth Engine Exports/TNC", 'TimeSeries_ndvi_iGDE_v1', "CSV");
Export.table.toDrive(Table_v2, 'TS_NDVI_Indices_v2', "Earth Engine Exports/TNC", 'TimeSeries_ndvi_iGDE_v2', "CSV");


////////////////////////////////////////
// Grab ppt and temp date
////////////////////////////////////////

//Compute monthly and annual ppt for the iGDEs

var monthly = compute(1985, 2017, 1)
var annual = compute(1985, 2017, 12)

//print(ui.Chart.feature.byFeature(monthly, 'system:time_start'))
print(ui.Chart.feature.byFeature(annual, 'system:time_start'))

print('Mean Annual Ppt', annual)
//var a = monthly.map(addYear)
//print(a)

var annual_ppt = 'table_ppt'; 
Export.table.toDrive({
  collection: annual, 
  description: annual_ppt, 
  fileNamePrefix: annual_ppt,
  fileFormat: 'csv'
});


var annual_sum = annual.reduceRegions({
  //collection:feature2,
  collection:igde_v1, 
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(), 
    sharedInputs: true}), 
  scale: 30,
});

///////////////////////////////////////////////////////////////////////////////////
//////////////////////// Temporal Analysis of change //////////////////////////////
//////////////////////////////////////////////////////////////////////////////////

//METHOD ONE
//a. Departure from  Annual Median

//Find how much each analysis image differs from the baseline normal
var analysisTS_Departures_AnnualMedian = annualMedianTS.map(function(img){
  return img.subtract(AnnualMedian).copyProperties(img,['system:time_start']);
});

//print('AnalysisTS_DeparturefromBaseline',analysisTS_Departures_Baseline)

//Extract only the indices to view 
var IndicesDeparturefromMedian = analysisTS_Departures_AnnualMedian.select(analysisIndices);
print('AnalysisIndices_DepartedfromBaseline',IndicesDeparturefromMedian)
Map.addLayer(IndicesDeparturefromMedian,vizParamsIndices,'Indices_DeparturefromAnnualMedian',false)

var chartDiffMedian = ui.Chart.image.series(IndicesDeparturefromMedian, sa, ee.Reducer.mean(), 1500)
  .setOptions({title: 'Temporal Trend of Change in Indices from AnnualMedian'
   //vAxis: {title: 'Indices'},
  // hAxis: {title: 'date', format: 'MM-yy', gridlines: {count: 7}},  
  //legend:{analysisIndices}, 
  });
print(chartDiffMedian)

////////////////////////////////////////////////////////////////////////////
//Prep the difference from baseline images for linear regression 
//Add constant and year information, extract the indices from the Timeseries
///////////////////////////////////////////////////////////////////////
var analysisDepartures= IndicesDeparturefromMedian.map(prepForLinearRegression);
//print('DifferenceTimeSeries_year_LR',analysisDepartures)


//////////////////////////////////////////////////////////////
//Linear Regression of the entire difference TimeSeries together
////////////////////////////////////////////////////////////////////

//Independents are hard-coded to time and intercept constant
var analysisLinearModel = analysisDepartures.reduce(ee.Reducer.linearRegression(2,analysisIndices.length))
                          .select([0],['coefficients'])
                          .arrayTranspose()
                          .arrayFlatten([analysisIndices,['intercept','slope']])
                          .clip(igde_v1);
//var analysisLinearModel = analysisLinearModel.filterBounds(all_gde)                         
//print('LMresults_multiIndices',analysisLinearModel);

//Find the intercept and slope bands for parsing
var interceptBands = ee.List.sequence(0,analysisIndices.length*2-1,2);
var slopeBands = ee.List.sequence(1,analysisIndices.length*2,2);


//Get predicted names
var predicted_names = analysisIndices.map(function(nm){return nm + '_Predicted'});

//Parse linear regression model and predict output
var actualPredicted = analysisDepartures.map(function(img){
  var independent = img.select(['year']).addBands( img.select(['year'])).addBands( img.select(['year'])).addBands( img.select(['year'])).addBands( img.select(['year'])).addBands( img.select(['year']));
  independent = independent.select(ee.List.sequence(0,analysisIndices.length-1));
  var predicted = independent.multiply(analysisLinearModel.select(slopeBands)).add(analysisLinearModel.select(interceptBands)).rename(predicted_names);
  return img.select(analysisIndices).addBands(predicted);
 });
 

 ////////////////////////////////////////////////////////////////////////////
//Add actual vs predicted for charting
/////////////////////////////////////////////////////////////////////////////
print('Predictions',actualPredicted);
Map.addLayer(actualPredicted,{},'Analysis Trend For Charting Method One',false);
//Map.addLayer(analysisLinearModel,vis_slope,'ResultsLR_M1',false);

////////////////////////////////////
//Add each trend for visualization
////////////////////////////////////

analysisIndices.map(function(analysisIndex){
  //Map.addLayer(analysisLinearModel.select([analysisIndex+'_slope']),{'min':-0.01,'max':0,'palette':'F00,0F0'},analysisIndex + ' Departure from Normal Trend',false)
  Map.addLayer(analysisLinearModel.select([analysisIndex+'_slope']),{'min':-0.01,'max':0,'palette':'ff380b,ff7660,ffb9ae,fff7be,ffdb58,f5ff62,a2ff8b,2eeb4e'},analysisIndex + ' Departure (slope) from Normal Trend',false);
});

//////////////////////////////////////////
//METHOD TWO
//////////////////////////////////////////

//b. Departure from Baseline
var baselineMedian = BasePeriod_TimeSeries.median();
print('BaselineTimeSeries',BasePeriod_TimeSeries)
print('BaselineMedian(1985-2000)', baselineMedian)
print('AnalysisTimeSeries',Analysis_TimeSeries)

//Find how much each analysis image differs from the baseline normal
var analysisTS_Departures_Baseline = Analysis_TimeSeries.map(function(img){
  return img.subtract(baselineMedian).copyProperties(img,['system:time_start']);
});

//print('AnalysisTS_DeparturefromBaseline',analysisTS_Departures_Baseline)

//Extract only the indices to view 
var IndicesDeparturefromMedian = analysisTS_Departures_Baseline.select(analysisIndices);
print('AnalysisIndices_DepartedfromBaseline',IndicesDeparturefromMedian)
Map.addLayer(IndicesDeparturefromMedian,vizParamsIndices,'Indices_DeparturefromBasePeriodMedian',false)

var chartDiffMedian = ui.Chart.image.series(IndicesDeparturefromMedian, sa, ee.Reducer.mean(), 1500)
  .setOptions({title: 'Temporal Trend of Change in Indices from Baseline'
   //vAxis: {title: 'Indices'},
  // hAxis: {title: 'date', format: 'MM-yy', gridlines: {count: 7}},  
  //legend:{analysisIndices}, 
  });
print(chartDiffMedian)

////////////////////////////////////////////////////////////////////////////
//Prep the difference from baseline images for linear regression 
//Add constant and year information, extract the indices from the Timeseries
///////////////////////////////////////////////////////////////////////
var analysisDepartures= IndicesDeparturefromMedian.map(prepForLinearRegression);
//print('DifferenceTimeSeries_year_LR',analysisDepartures)


//////////////////////////////////////////////////////////////
//Linear Regression of the entire difference TimeSeries together
////////////////////////////////////////////////////////////////////

//Independents are hard-coded to time and intercept constant
var analysisLinearModel = analysisDepartures.reduce(ee.Reducer.linearRegression(2,analysisIndices.length))
                          .select([0],['coefficients'])
                          .arrayTranspose()
                          .arrayFlatten([analysisIndices,['intercept','slope']])
                          .clip(igde_v1);
//print('LMresults_multiIndices',analysisLinearModel);

//Find the intercept and slope bands for parsing
var interceptBands = ee.List.sequence(0,analysisIndices.length*2-1,2);
var slopeBands = ee.List.sequence(1,analysisIndices.length*2,2);


//Get predicted names
var predicted_names = analysisIndices.map(function(nm){return nm + '_Predicted'});

//Parse linear regression model and predict output
var actualPredicted = analysisDepartures.map(function(img){
  var independent = img.select(['year']).addBands( img.select(['year'])).addBands( img.select(['year'])).addBands( img.select(['year'])).addBands( img.select(['year'])).addBands( img.select(['year']));
  independent = independent.select(ee.List.sequence(0,analysisIndices.length-1));
  var predicted = independent.multiply(analysisLinearModel.select(slopeBands)).add(analysisLinearModel.select(interceptBands)).rename(predicted_names);
  return img.select(analysisIndices).addBands(predicted);
 });
 
 ////////////////////////////////////////////////////////////////////////////
//Add actual vs predicted for charting
/////////////////////////////////////////////////////////////////////////////
print('Predictions',actualPredicted);
Map.addLayer(actualPredicted,{},'Analysis Trend For Charting MethodTwo',false);
//Map.addLayer(analysisLinearModel,{},'ResultsLR _2',false);


////////////////////////////////////////////////////////////////////////////////
/////////////////////////// Vizualize Trends of Departure in NDVI //////////////
///////////////////////////////////////////////////////////////////////////////

// METHOD TWO 
//Extract NDVI reults from the DepartureCollection, convert it to Image, Reduce Region
var test =  analysisDepartures.select('NDVI');
print('Dept_NDVIcollection',test)
var ImageStack_NDVI = ee.Image(collectionToImage(test))

//Convert TimeSeries_AnalysisDeparture to Image, Reduce Region
var ImageStack_NDMI= ee.Image(collectionToImage(analysisDepartures.select('NDMI')))

print('NDVICollectiontotImage',ImageStack_NDVI)
print('EntireDepCollectiontotImage',ImageStack_NDMI)
Map.setCenter(-120.31102, 36.67881,14);

//Map.addLayer(multi_mask2,{},'sacramentomask2',true);
Map.addLayer(ImageStack_NDVI.select('NDVI').clip(all_gde), {min:-0.1, max: 1.0, palette: ndvi_palette}, 'ndvi-01');
Map.addLayer(ImageStack_NDVI.select('NDVI_1').clip(all_gde), {min:-0.1, max: 1.0, palette: ndvi_palette}, 'ndvi-02');
Map.addLayer(ImageStack_NDVI.select('NDVI_2').clip(all_gde), {min:-0.1, max: 1.0, palette: ndvi_palette}, 'ndvi-03');
Map.addLayer(ImageStack_NDVI.select('NDVI_3').clip(all_gde), {min:-0.1, max: 1.0, palette: ndvi_palette}, 'ndvi-04');
Map.addLayer(ImageStack_NDVI.select('NDVI_4').clip(all_gde), {min:-0.1, max: 1.0, palette: ndvi_palette}, 'ndvi-05');
Map.addLayer(ImageStack_NDVI.select('NDVI_5').clip(all_gde), {min:-0.1, max: 1.0, palette: ndvi_palette}, 'ndvi-06');
Map.addLayer(ImageStack_NDVI.select('NDVI_6').clip(all_gde), {min:-0.1, max: 1.0, palette: ndvi_palette}, 'ndvi-07');
Map.addLayer(ImageStack_NDVI.select('NDVI_7').clip(all_gde), {min:-0.1, max: 1.0, palette: ndvi_palette}, 'ndvi-08');
Map.addLayer(ImageStack_NDVI.select('NDVI_8').clip(all_gde), {min:-0.1, max: 1.0, palette: ndvi_palette}, 'ndvi-09');
Map.addLayer(ImageStack_NDVI.select('NDVI_9').clip(all_gde), {min:-0.1, max: 1.0, palette: ndvi_palette}, 'ndvi-10');
Map.addLayer(ImageStack_NDVI.select('NDVI_10').clip(all_gde), {min:-0.1, max: 1.0, palette: ndvi_palette}, 'ndvi-11');
Map.addLayer(ImageStack_NDVI.select('NDVI_11').clip(all_gde), {min:-0.1, max: 1.0, palette: ndvi_palette}, 'ndvi-12');
Map.addLayer(ImageStack_NDVI.select('NDVI_12').clip(all_gde), {min:-0.1, max: 1.0, palette: ndvi_palette}, 'ndvi-13');
Map.addLayer(ImageStack_NDVI.select('NDVI_13').clip(all_gde), {min:-0.1, max: 1.0, palette: ndvi_palette}, 'ndvi-14');
Map.addLayer(ImageStack_NDVI.select('NDVI_14').clip(all_gde), {min:-0.1, max: 1.0, palette: ndvi_palette}, 'ndvi-15');

////////////////////////////////////
//Add each trend for visualization
////////////////////////////////////
analysisIndices.map(function(analysisIndex){
  //Map.addLayer(analysisLinearModel.select([analysisIndex+'_slope']),{'min':-0.01,'max':0,'palette':'F00,0F0'},analysisIndex + ' Departure from Normal Trend',false);
  Map.addLayer(analysisLinearModel.select([analysisIndex+'_slope']).clip(igde_v1),{'min':-0.01,'max':0,'palette':'ff380b,ff7660,ffb9ae,fff7be,ffdb58,f5ff62,a2ff8b,2eeb4e'},analysisIndex + ' Departure (slope) from Normal Trend',false);

  
});

//////////////////////
// Check NAIP 
//////////////////////

print('Load NAIP Imagery within study area', naip_collect);
print('Start Date Timestamp: ', start_date); 
print('End Date Timestamp: ', end_date); 
print ('Annual Mosaic of NAIP', annualNAIP);


//////////////////////////////////////////////////
// run z test on temporal trends
/////////////////////////////////////////////////

//Run t-test or z-test for each pixel to look at significant trend of change

//////////////////////////////////////////////////////////
/////////Landsat 8 surface reflectance collection/////////
//////////////////////////////////////////////////////////

/*var L8 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
.filterDate(strdate,enddate)
.filterBounds(sa)
.map(maskClouds);
print(L8)
var oli_collection = L8.sort('system:time_start');

var bands_oli = function(image) {
//Compute time in fractional years since the epoch.
var date = ee.Date(image.get('system:time_start'));
var years = date.difference(ee.Date('1970-01-01'), 'year');
return (image)
  // Add a time band.
    .addBands(ee.Image(years).rename('t').float())
    //Add a EVI band
    .addBands(image.expression(
      '2.5 * (nir - red) / (nir + 6 * red - 7.5 * blue + 1)',
        {
          red: image.select('B4').multiply(0.0001),    // 620-670nm, RED
          nir: image.select('B5').multiply(0.0001),    // 841-876nm, NIR
          blue: image.select('B2').multiply(0.0001)    // 459-479nm, BLUE
        }).rename('evi'));
};


//var oli_collection = oli_collection.map(bands_oli);
//var annualMedian = annualMedianTSyear.select('EVI')
//var choose_collection = collection_with_NIRv.select('EVI')

//Use Julian calendar here: https://www-air.larc.nasa.gov/tools/jday.htm
//study days 190 - 260

//Dry season
var day1 = 190//July 1 
var day2 = 260; //Aug 30 

//Rainy season
var day3 = 120;// May
var day4 = 270;// September

//Limit EVI between (-1,1) and avoid take values outside this range into the regression
var lim_evi = function(image) {
return image.updateMask((image.select('EVI').gte(-1)).and(image.select('EVI').lte(1)));};

var oli_collection = collection_with_NIRv.select('EVI')
.map(lim_evi)
.sort('system:time_start')
.filter(ee.Filter.dayOfYear(day1,day2));//Get only images from dry season

//run KendallsCorrelaton
var evi_k = oli_collection.select('EVI').reduce(ee.Reducer.kendallsCorrelation()).clip(all_gde);
print('Check t score and pvalue', evi_k)
var N = ee.Image(oli_collection.select('EVI').count().clip(all_gde));
print('Index Value', N)

//The expression to calculate z is: 3*t*(sqrt(N*(N-1)))/sqrt(2*(2*N+5)), for simplicity distinguised as:
//num (3*t*(sqrt(N*(N-1)))) and den (sqrt(2*(2*N+5)))

var t = evi_k.select('EVI_tau');
var num = ee.Image(3).multiply(t.multiply((N.multiply(N.subtract(ee.Image(1)))).sqrt()));
var den = (ee.Image(2).multiply((ee.Image(2).multiply(N)).add(ee.Image(5)))).sqrt();

var z = (num.divide(den));

Map.addLayer(t,{palette: ['#ff0000','#000000','#1bff00']},'tau b value');
Map.addLayer(z,{palette: ['#ff0000','#000000','#1bff00']},'z value');

*/

/////////////////////////////////////////////////////////////
//Create zonal summary of departure trends in NDVI and NDMI for iGDEs
/////////////////////////////////////////////////////////////

//BREAK
/*
//////////////////////////////////////////////////////////////////////
// Bring in the shapefile or feature class to summarize results
// Check the trend in areas within ground water dependent vegetation 
//////////////////////////////////////////////////////////////////////

//Create a mask to remove areas without GDE polygons nodata = 32767 or 2147483647
Map.addLayer(maskveg2,{},'Venturanew',true);// nodata = 65535

var GDE_sacramento = maskSac.lt(65535).multiply(maskSac); 
var Fst = ForestPolygons.lt(255).multiply(ForestPolygons);
Map.addLayer(GDEmask,{},'mask',false);

var newmask2 = GDE_sacramento.gt(1).updateMask(GDE_sacramento.eq(0));
var FST2 = Fst.gt(1).updateMask(Fst.eq(0));
Map.addLayer(newmask,{},'newmask',true)

var multi_mask2 = newmask2.gt(1).updateMask(newmask2.eq(0));
Map.addLayer(multi_mask2,{},'sacramentomask2',false);

//Sacramento : CONVERT GDES to Vectors
// convert GDEs to vectors
var geoGDE_sacramento = GDE_sacramento.updateMask(GDE_sacramento.neq(0));
var geoGDEs_Sac = geoGDE_sacramento.reduceToVectors({
  //geometry:maskveg,
  //geometry:ventura_bounds,
  geometryType:'polygon',
  eightConnected:false,
  scale:30
});


Map.addLayer(geoGDE_sacramento,{},'GDEmask_Sacramento', false);
Map.addLayer(geoGDEs_Sac,{'color':'0000FF'},'GDEs_Sacramento',true);

/////////////////////////////////////////////////////////////////////
//Create Final Complete TimeSeries with Results for exporting results 
/////////////////////////////////////////////////////////////////////

//Result Arrays Created

//extract year from : analysisDepartures.select('year')
//print(actualPredicted)
//print(analysisLinearModel)
//print(analysisDepartures)

//combine with actualPredicted stack, analysisLinearModel
//Collection to reduce regions and create tables

//BREAK

//Sacramento Summary
var Table4 = analysisLinearModel.reduceRegions({
  //collection:feature2,
  collection: geoGDEs_Sac, 
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(), 
    sharedInputs: true}), 
  scale: 30,
});

var Table5 = ImageStack_NDVI.reduceRegions({
  //collection:feature2,
  collection: geoGDEs_Sac, 
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(), 
    sharedInputs: true}), 
  scale: 30,
});

var Table6 = ImageStack_NDMI.reduceRegions({
  //collection:feature2,
  collection: geoGDEs_Sac, 
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(), 
    sharedInputs: true}), 
  scale: 30,
});

/////////////////////////////////////////////////////////////////////
//Export tables to google drive
////////////////////////////////////////////////////////////////////
Export.table.toDrive(Table4, 'Sac_LRpredictions', "Earth Engine Exports/TNC", 'LRPredictions_Sac', "CSV");
Export.table.toDrive(Table5, 'Sac_ZonalSummary_NDVI', "Earth Engine Exports/TNC", 'TemporalChange_NDVI_Sac', "CSV");
Export.table.toDrive(Table6, 'Sac_ZonalSummary_NDMI', "Earth Engine Exports/TNC", 'TemporalChange_NDMI_sac', "CSV");
*/

// Break here 

/*
////////////////////////////////////////////////////////////////////
//Convert collections to images
///////////////////////////////////////////////////////////////////
var baseline = baselineMedian.select(analysisIndices);
//print('Baseline',baseline)
var departures = collectionToImage(analysisDepartures);
var Predictedstack = collectionToImage(actualPredicted);
var getyear = collectionToImage(analysisDepartures.select('year'));
print('year',getyear);
print('Departure',departures)
print('Predictions',Predictedstack)
Map.addLayer(getyear,{},'getyear');



var combine = departures.addBands(Predictedstack);
print('combine', combine);
//Map.addLayer(combine.select('1_NDVI'),{},'EntireDataset')


var BaselineTable = baseline.reduceRegions({
  collection: geoGDEs, 
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(), 
    sharedInputs: true}), 
  scale: 30,
});


var departureTable = departures.reduceRegions({
  collection: geoGDEs, 
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(), 
    sharedInputs: true}), 
  scale: 30,
});
print(departureTable);

var resultsLMTable2 = analysisLinearModel.reduceRegions({
  collection: geoGDEs, 
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(), 
    sharedInputs: true}), 
  scale: 30,
});

var PredictedstackTable = Predictedstack.reduceRegions({
  collection: geoGDEs, 
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(), 
    sharedInputs: true}), 
  scale: 30,
});


var getyearTable = getyear.reduceRegions({
  collection: geoGDEs, 
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(), 
    sharedInputs: true}), 
  scale: 30,
});


/*var combineTable3 = combine.reduceRegions({
  collection: geoGDEs, 
  reducer: ee.Reducer.mean().combine({
    reducer2: ee.Reducer.stdDev(), 
    sharedInputs: true}), 
  scale: 30,
});


//print(reductionTable)
//Export.table.toDrive(ee.FeatureCollection(geoGDEs),'myTable', "Earth Engine Exports", 'myTable', "CSV");
//Export.table.toDrive(reductionTable, 'myTable2', "Earth Engine Exports", 'myTable2', "CSV");
Export.table.toDrive(resultsLMTable2, 'myTable3', "Earth Engine Exports/TNC", 'resultsLM', "CSV");
Export.table.toDrive(getyearTable, 'year', "Earth Engine Exports/TNC", 'YearData', "CSV");
Export.table.toDrive(BaselineTable, 'baseline', "Earth Engine Exports/TNC", 'BaselineTable', "CSV");
Export.table.toDrive(PredictedstackTable, 'predictions', "Earth Engine Exports/TNC", 'predictions', "CSV");
Export.table.toDrive(departureTable, 'departure', "Earth Engine Exports/TNC", 'departureTable', "CSV");



/*
// Create multiple reducers
function multiplereducer(image){
var mean = ee.Reducer.mean(image);
var sd = ee.Reducer.stdDev(image);
var final=mean.combine(sd)
  return final
};


var zonal_mean = NDVIseries.reduceRegion({
  reducer: ee.Reducer.mean(),
  collection: geoGDEs,  
  scale: 30,  maxPixels: 20000000});
print('Combined zonal stats: ', zonal_stats);
print('Check #1: ', ee.List(zonal_stats.get('groups')).get(0));


// Create multiple reducers
var meanSD = ee.Reducer.mean().combine({
  reducer2: ee.Reducer.stdDev(),
  sharedInputs: true
});

// Create summary table for export
/*var ndviTable = NDVIseries.reduceRegions({
  reducer: multiplereducer,
  collection: geoGDEs,
  scale: 30
});
*/

// Create summary table for export
//var test = mutiplereducer(NDVIseries)({collection: geoGDEs,  scale: 30});
/*var ndviTable = NDVIseries.reduceRegions(NDVIseries,{reducer: meanSD, collection: geoGDEs,  scale: 30});
var LR_ndviTable = LR_ndvi.reduceRegions(LR_ndvi,{reducer: multiplereducer, collection: geoGDEs,  scale: 30});

// Create summary table for export
var ndwiTable = NDWIseries.reduceRegions({reducer: multiplereducer, collection: geoGDEs,scale: 30});
var LR_ndwiTable = LR_ndwi.reduceRegions(LR_ndvi,{reducer: multiplereducer, collection: geoGDEs,  scale: 30});
*/
///////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
//Export results
///////////////////////////////////////////////////////////////////

/* 


// Export tif to drive
Export.image.toDrive({
  image: NDVIseries,
  description: 'NDVIseries',
  scale: 30,
  region: bounds_export,
  maxPixels: 2000000000
});

Export.table.toDrive({collection: ndviTable});
Export.table.toDrive({collection: ndwiTable});

*/


